<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net471</TargetFramework>
    <AssemblyName>DynamicMaps</AssemblyName>
    <RootNamespace>DynamicMaps</RootNamespace>
    <Nullable>disable</Nullable>
    <!-- The two lines below will set the output path for the binaries -->
    <OutputPath>bin\$(Configuration)\$(ProjectName)\$(AssemblyName)-$(Version)\</OutputPath>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
  </PropertyGroup>
  
  <ItemGroup>
    <Reference Include="Assembly-CSharp">
      <HintPath>$(TarkovManagedDir)Assembly-CSharp.dll</HintPath>
    </Reference>
    <Reference Include="Comfort">
      <HintPath>$(TarkovManagedDir)Comfort.dll</HintPath>
    </Reference>
    <Reference Include="Comfort.Unity">
      <HintPath>$(TarkovManagedDir)Comfort.Unity.dll</HintPath>
    </Reference>
    <Reference Include="DissonanceVoip">
      <HintPath>$(TarkovManagedDir)DissonanceVoip.dll</HintPath>
    </Reference>
    <Reference Include="DOTween">
      <HintPath>$(TarkovManagedDir)DOTween.dll</HintPath>
    </Reference>
    <Reference Include="DOTween.Modules">
      <HintPath>$(TarkovManagedDir)DOTween.Modules.dll</HintPath>
    </Reference>
    <Reference Include="Newtonsoft.Json">
      <HintPath>$(TarkovManagedDir)Newtonsoft.Json.dll</HintPath>
    </Reference>
    <Reference Include="Sirenix.Serialization">
      <HintPath>$(TarkovManagedDir)Sirenix.Serialization.dll</HintPath>
    </Reference>
    <Reference Include="Unity.TextMeshPro">
      <HintPath>$(TarkovManagedDir)Unity.TextMeshPro.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine">
      <HintPath>$(TarkovManagedDir)UnityEngine.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.CoreModule">
      <HintPath>$(TarkovManagedDir)UnityEngine.CoreModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.PhysicModule">
      <HintPath>$(TarkovManagedDir)UnityEngine.PhysicsModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.ImageConversionModule">
      <HintPath>$(TarkovManagedDir)UnityEngine.ImageConversionModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.InputLegacyModule">
      <HintPath>$(TarkovManagedDir)UnityEngine.InputLegacyModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.IMGUIModule">
      <HintPath>$(TarkovManagedDir)UnityEngine.IMGUIModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.TextRenderingModule">
      <HintPath>$(TarkovManagedDir)UnityEngine.TextRenderingModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.UI">
      <HintPath>$(TarkovManagedDir)UnityEngine.UI.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.UIModule">
      <HintPath>$(TarkovManagedDir)UnityEngine.UIModule.dll</HintPath>
    </Reference>

    <Reference Include="0Harmony">
      <HintPath>$(TarkovBepInExCoreDir)0Harmony.dll</HintPath>
    </Reference>
    <Reference Include="BepinEx">
      <HintPath>$(TarkovBepInExCoreDir)BepInEx.dll</HintPath>
    </Reference>
    <Reference Include="BepinEx.Preloader">
      <HintPath>$(TarkovBepInExCoreDir)BepInEx.Preloader.dll</HintPath>
    </Reference>

    <Reference Include="spt-reflection">
      <HintPath>$(SPTPluginsDir)spt-reflection.dll</HintPath>
    </Reference>
    <Reference Include="spt-custom">
      <HintPath>$(SPTPluginsDir)spt-custom.dll</HintPath>
    </Reference>
    <Reference Include="spt-common">
      <HintPath>$(SPTPluginsDir)spt-common.dll</HintPath>
    </Reference>
  </ItemGroup>
  
  <ItemGroup>
    <Folder Include="obj\" />
  </ItemGroup>
  
  <!-- Gets the commit hash from git -->
  <Target Name="SetSourceRevisionId" BeforeTargets="InitializeSourceControlInformation">
    <Exec Command="git describe --long --always --dirty --exclude=* --abbrev=8" IgnoreExitCode="False">
      <Output PropertyName="SourceRevisionId" TaskParameter="ConsoleOutput" />
    </Exec>
  </Target>
  
  <!-- Gets the version property from the Directory.Build.props file -->
  <Target Name="PreBuild" BeforeTargets="PreBuildEvent">
    <ItemGroup>
      <VersionCs Include="$(ProjectDir)Version.cs" />
      <Compile Include="@(VersionCs)" Exclude="@(VersionCs)" /> <!-- Resolves double include -->
      <FileWrites Include="@(VersionCs)" />
    </ItemGroup>

    <!-- Write the version to Version.cs, kind of a hack to get version info into BepInEx -->
    <WriteLinesToFile File="@(VersionCs)" Overwrite="true" Lines="// HACK: autogenerated file containing version info from VERSION.txt" />
    <WriteLinesToFile File="@(VersionCs)" Lines="namespace DynamicMaps{public static class BuildInfo {public const string Version = &quot;$(Version)&quot;%3B}}" />
  </Target>
  
  <Target Name="ClientPostBuild" AfterTargets="PostBuildEvent">
    <Message Importance="high" Text="Client Built  $(SolutionDir)" />
    <ItemGroup>
      <OutputDLL Include="$(ProjectDir)$(OutDir)$(TargetName).dll" />
      <DebugFile Include="$(ProjectDir)$(OutDir)$(TargetName).pdb" Condition=" '$(Configuration)' == 'Debug'" /><!--Include the pdb if debuging -->
      <License Include="$(SolutionDir)LICENSE" />
      <Resources Include="$(ProjectDir)Resources\**\*.*" />
    </ItemGroup>

    <!-- Clears the tarkov game and release folders -->
    <RemoveDir Directories="$(ActiveTarkovDir)BepInEx\plugins\DynamicMaps"/>
    <RemoveDir Directories="$(SolutionDir)release\BepInEx" />
    
    <!-- Copies the output and resources to tarkov game folder -->
    <Copy SourceFiles="@(OutputDLL);@(Resources);@(License);@(DebugFile)" DestinationFolder="$(ActiveTarkovDir)BepInEx\plugins\DynamicMaps\%(RecursiveDir)" />
    
    <!-- Copies the files to combined release folder -->
    <Copy SourceFiles="@(OutputDLL);@(Resources);@(License);@(DebugFile)" DestinationFolder="$(SolutionDir)release\BepInEx\plugins\DynamicMaps\%(RecursiveDir)" />

    <!-- Creates a zip file -->
    <ItemGroup><FilesToDelete Include="$(SolutionDir)release\*.zip"/></ItemGroup><Delete Files="@(FilesToDelete)" /><!-- Remove old zip -->
    <ZipDirectory SourceDirectory="$(SolutionDir)release\" DestinationFile="$(SolutionDir)DynamicMaps-$(Version)-$(SourceRevisionId).zip" /><!-- Make new zip in different folder to prevent problems -->
    <Move SourceFiles="$(SolutionDir)DynamicMaps-$(Version)-$(SourceRevisionId).zip" DestinationFolder="$(SolutionDir)release\" /><!-- Move new zip to release folder -->
  </Target>
</Project>
